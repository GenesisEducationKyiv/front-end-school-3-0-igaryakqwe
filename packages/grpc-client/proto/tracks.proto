syntax = "proto3";

package tracks;

option go_package = "tracks.v1;trackspb";

message Track {
  string id = 1;
  string title = 2;
  string artist = 3;
  optional string album = 4;
  repeated string genres = 5;
  optional string coverImage = 6;
  string slug = 7;
  optional string audioFile = 8;
  string createdAt = 9;
  string updateAt = 10;
}

message PaginationMeta {
  int32 total = 1;
  int32 page = 2;
  int32 limit = 3;
  int32 totalPages = 4;
}

message GetTrackRequest {
  string slug = 1;
}

message GetTrackResponse {
  Track track = 1;
}

message ListTracksRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
  optional string sort = 3;
  optional string order = 4;
  optional string search = 5;
  optional string genre = 6;
  optional string artist = 7;
}

message ListTracksResponse {
  repeated Track data = 1;
  PaginationMeta meta = 2;
}

message CreateTrackRequest {
  string title = 1;
  string artist = 2;
  optional string album = 3;
  repeated string genres = 4;
  optional string coverImage = 5;
}

message CreateTrackResponse {
  Track track = 1;
}

message UpdateTrackRequest {
  string id = 1;
  string title = 2;
  string artist = 3;
  string album = 4;
  repeated string genres = 5;
  string coverImage = 6;
}

message UpdateTrackResponse {
  optional Track track = 1;
}

message DeleteTrackRequest {
  string id = 1;
}

message DeleteTrackResponse {}

message DeleteTracksRequest {
  repeated string ids = 1;
}

message DeleteTracksResponse {
  repeated string success = 1;
  repeated string failed = 2;
}

message UploadTrackFileRequest {
  string id = 1;
  string filename = 2;
  bytes file = 3;
  string mimetype = 4;
}

message UploadTrackFileResponse {
  Track track = 1;
}

message DeleteTrackFileRequest {
  string id = 1;
}

message DeleteTrackFileResponse {
  Track track = 1;
}

service TracksService {
  rpc GetTrack(GetTrackRequest) returns (GetTrackResponse);
  rpc ListTracks(ListTracksRequest) returns (ListTracksResponse);
  rpc CreateTrack(CreateTrackRequest) returns (CreateTrackResponse);
  rpc UpdateTrack(UpdateTrackRequest) returns (UpdateTrackResponse);
  rpc DeleteTrack(DeleteTrackRequest) returns (DeleteTrackResponse);
  rpc DeleteTracks(DeleteTracksRequest) returns (DeleteTracksResponse);
  rpc UploadTrackFile(UploadTrackFileRequest) returns (UploadTrackFileResponse);
  rpc DeleteTrackFile(DeleteTrackFileRequest) returns (DeleteTrackFileResponse);
}